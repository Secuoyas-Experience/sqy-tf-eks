locals {
  organization       = "secuoyas"
  environment        = "toolbox"
  prefix             = "${local.organization}-${local.environment}-backstage"
  bucket_name        = "${local.prefix}-techdocs"
  bucket_description = "static documentation generated by techdocs"
}

##################################
########## CREATE BUCKET #########
##################################

resource "aws_s3_bucket" "backstage_bucket" {
  bucket = local.bucket_name

  tags = {
    Environment  = local.environment
    Organization = local.organization
    Name         = local.bucket_name
    Description  = local.bucket_description
  }
}

resource "aws_s3_bucket_versioning" "bucket_versioning" {
  bucket = aws_s3_bucket.backstage_bucket.bucket
  versioning_configuration { status = "Disabled" }
}

resource "aws_s3_bucket_public_access_block" "block_state_public_access" {
  bucket                  = aws_s3_bucket.backstage_bucket.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

data "aws_iam_policy_document" "backstage_s3_read_policy_document" {
  statement {
    actions   = ["s3:GetObject"]
    resources = ["${aws_s3_bucket.backstage_bucket.arn}/*"]
    effect    = "Allow"

    principals {
      type        = "AWS"
      identifiers = [data.aws_caller_identity.current.account_id]
    }
  }
}

resource "aws_s3_bucket_policy" "backstage_s3_read_policy" {
  bucket = aws_s3_bucket.backstage_bucket.id
  policy = data.aws_iam_policy_document.backstage_s3_read_policy_document.json
}

# ##################################
# ############## IAM ###############
# ##################################

data "aws_iam_policy_document" "backstage_read_policy_document" {
  statement {
    actions   = ["s3:GetObject"]
    resources = ["${aws_s3_bucket.backstage_bucket.arn}/*"]
    effect    = "Allow"
  }
}

resource "aws_iam_policy" "backstage_read_policy" {
  name   = "${local.prefix}-reader-policy"
  policy = data.aws_iam_policy_document.backstage_read_policy_document.json
}

# ############# WRITE ###############
data "aws_iam_policy_document" "backstage_writer_policy_document" {
  version = "2012-10-17"

  statement {
    actions = ["s3:PutObject"]
    effect  = "Allow"
    resources = [
      "${aws_s3_bucket.backstage_bucket.arn}",
      "${aws_s3_bucket.backstage_bucket.arn}/*"
    ]
  }
}

resource "aws_iam_policy" "backstage_writer_policy" {
  name   = "backstage-writer-policy"
  policy = data.aws_iam_policy_document.backstage_writer_policy_document.json
}

# ##################################
# ############ IAM USERS ###########
# ##################################

module "backstage_reader_iam_user" {
  source                        = "terraform-aws-modules/iam/aws//modules/iam-user"
  name                          = "${local.prefix}-reader"
  force_destroy                 = true
  password_reset_required       = true
  create_iam_user_login_profile = false
}

module "backstage_reader_user_group" {
  source                   = "terraform-aws-modules/iam/aws//modules/iam-group-with-policies"
  name                     = "${local.prefix}-readers"
  group_users              = [module.backstage_reader_iam_user.iam_user_name]
  custom_group_policy_arns = [aws_iam_policy.backstage_read_policy.arn]
}

module "backstage_writer_iam_user" {
  source                        = "terraform-aws-modules/iam/aws//modules/iam-user"
  name                          = "${local.prefix}-writer"
  force_destroy                 = true
  password_reset_required       = true
  create_iam_user_login_profile = false
}

module "backstage_writer_user_group" {
  source                   = "terraform-aws-modules/iam/aws//modules/iam-group-with-policies"
  name                     = "${local.prefix}-writers"
  group_users              = [module.backstage_writer_iam_user.iam_user_name]
  custom_group_policy_arns = [aws_iam_policy.backstage_read_policy.arn]
}